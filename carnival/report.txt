This lab created a carnival ride that has multiple shapes moving in different directions, all connected to each other through simple points.
The user sees a grass field, with a few support beams and a bar across the middle, which a large circle moves across while rotating. The circle moves back and forth while rotating clockwise rather slowly. On four points around the circle, there are red squares that rotate acround their centers counterclockwise. On the corners of each swquare, there are green triangles, all of which rotate clockwise together.
From an internal perspective, there are four functions that contribute to the drawing of the carnival ride. After declaring the initial variables, the main function opens up a screen and makes the background a bright blue like the sky. Next the variables for the radius and angle of the circle are declared and defined, along with the radius and angles for the squares and the triangles. The squares all rotate at the same speed and the triangles all rotate at the same speed. They are created using loops of the program, all offset by 90 degrees (pi/2). 
The first function updates the center location of the big circle, which moves it across the center horizontal axis. It moves at 1 pixel per loop, and if it gets to a certain point, it switches direction of movement. This updates the value of xcenter, and also can update the value of the pointer xright, which determines which direction the circle is moving. It only updates this pointer if the circle reaches its max or min value for xcenter, and then must flip the direction.
The second function draws the grass, the support beams, and the black circle. It takes inputs of the screen size, the center coordinates of the big circle, and the radius. Although the circle seems to rotate, the program actually has a static circle and rotates the squares around the perimeter.
The drawSquare function takes many inputs and calculates the vericices of a square to draw, then draws four individual lines. By updating the values of squareAngle, the process of drawing one line can be changed to draw four different lines, all offset by 90 degrees. After one set of verticies is calculated, these are passed to the drawTri function as the center for one triangle. Because it takes four loops to draw the four different lines of the square, the drawTri function is called four times, one for each vertex of the square. The drawSquare function is looped four times, with bigAngle updated each time, allowing there to be four evenly spaced squares around the circle. The function also draws the lines from the circle center to the square center and also the cricle that acts as the bolt for the squares.
By using the same method as the drawSquare function, the drawTri function also draws the four triangles around each square. It loops through the same code four, given the center, radius and angle, it draws a triangle around the certain point. The center is always one of the corners of the square, which is given as an input as these points are calculated in drawSquare. 
The program then updates the values of squareAngle, bigAngle, and triAngle,which causes these all to rotate. It clears the screen and then redraws the entire structure every loop, with slighty updated values for the angles and the center of the circle. 
The program was tested by entering different values for the radii and changing the difference in angle per loop. This caused the rotation to occur faster or slower, and the radii changed the size of the shapes. These changes did not affect the program or how it runs. 
